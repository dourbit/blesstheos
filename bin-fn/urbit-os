#!/usr/bin/env bash

COMMAND_FN=urbit-os

custom-image() {
  if [ ! -z ${URBIT_IMAGE+x} ]; then
    echo "Custom URBIT_IMAGE=$URBIT_IMAGE"
  fi
}

docker-image() {
  echo $(docker --version)
  if [ ! -z ${URBIT_IMAGE+x} ]; then
    echo "URBIT_IMAGE=$URBIT_IMAGE"
  else
    echo "URBIT_IMAGE=asssaf/urbit:latest"
  fi
}

usage() {
  cat <<EOF
Usage: $COMMAND_FN <command> [args]

The following commands can be run, some of which provide their own usage info:

  install   > downloads some scripts, clones git repos, and sets-up the system
  version   > report through urbit -R "build info", including other versions
  latest    > shows the latest tags from urbit repo of non-rc urbit & urbit-os
  run-zod   > runs a fakezod ship called zod to use for development purposes
  cmd       > check if a command exists, echo the path if it's a script
  piers     > a list of urbit assets contained in ~/data/urbit that can be run
  hex-seed  > hexdump -n 32 -e '4/4 "%08X"' /dev/random # for network keys gen
  new-ship  > create a ship, usually a planet for which you have a .key
  new-comet > get a new comet, usually takes some non-trivial time to mine
  run       > boots a ship or comet - one of your urbit assets
  host      > have it run a docker container in the background (wip)

EOF
}

errcho() { cat <<< "$@" 1>&2; }

latest() {
  # excluding .rc tags
  local filter=${2-'\.rc'} # ideally comes from $URBIT_TAGS_FILTER
  # TODO: conditional filter - empty string, or no var set: so it won't filter
  # https://unix.stackexchange.com/questions/38310/conditional-pipeline#38312
  git tag -l "$1*" --format='%(creatordate:short)%09%(refname:strip=2)' \
                   --sort=-creatordate | grep -v -e "$filter" | head -n 1
}

urbit-os() {
  if [ $# -eq 0 ]; then
    usage; true; return
  else
    local cmd=$1
    if [ $cmd == "install" ]; then
      "$DOTS_HOME/install/urbit"
    elif [ $cmd == "version" ]; then
      urbit-os urbit -R
      echo
      docker-image
    elif [ $cmd == "latest" ]; then
      cd "${DOTS_HOME}/use/repos/urbit"
      silent git fetch --depth=1 origin 'refs/tags/urbit-*:refs/tags/urbit-*'
      echo -e "$(latest 'urbit-v')\n$(latest 'urbit-os-v')" | sort -r
    elif [ $cmd == "hex-seed" ]; then
      hexdump -n 32 -e '4/4 "%08X"' /dev/random
      echo
    elif [ $cmd == "cmd" ]; then
      if [ $# -eq 1 ]; then
        errcho "Usage: $COMMAND_FN cmd <command>"
        false; return
      elif check-x ~/bin/urbit-os/$2; then
        echo ~/bin/urbit-os/$2
      elif check-x "$DOTS_HOME"/bin/urbit-os/$2; then
        echo "$DOTS_HOME"/bin/urbit-os/$2
      else
        usage
        errcho "urbit-os $2 - Command not found"
        false; return
      fi
    elif [ $cmd == "piers" ]; then
      ls "$HOME"/data/urbit | cat
    elif urbit-os cmd $cmd; then
      # cmd is a file to be run
      cd "$HOME"/data/urbit
      echo
      custom-image
      if [[ "$cmd" =~ ^run ]] && [[ "$2" =~ ^~ ]]; then
        $(urbit-os cmd $cmd) ${2:1} ${@:3} # remove the leading ~
      else
        $(urbit-os cmd $cmd) ${@:2}
      fi
    else
      false; return
    fi
  fi
}

[ $(basename $0) != $COMMAND_FN ] && export -f $COMMAND_FN || $COMMAND_FN "$@"
