#!/usr/bin/env bash

COMMAND_FN=holy

if [ $(basename $0) != $COMMAND_FN ]; then
  echo "The $COMMAND_FN script cannot be sourced."
  return 1
fi

usage() {
  cat <<EOF
Usage: $COMMAND_FN [ one || you ] <command> [<args>]

  rc        > runtime configuration file for your current or given shell
  init      > initializes holy for [bash] or another init/ <shell> use
  call      > easy way to invoke holy.sh functions without sourcing it
  home      > the path to the one \$HOLY_HOME even if holy isn't on yet
  path      > provides the path to HOLY_HOME and relative paths or repos
  in        > an alias to holy install - see next
  install   > runs the install script of an <ability> and turns it on
  ability   > checks an <ability> exists though also reports on all of them
  confirm   > some abilities have on/confirm scripts, to verify all is well
  bless     > vouches for a given <ability> installed by other means
  on        > says if an <ability> has been installed + it can holy on [holy]
  up        > does update and upgrade, see the commands below
  update    > does a git pull for \${HOLY_HOME}
  outdated  > same as ${HOLY_HOME}/bin/outdated
  upgrade   > same as ${HOLY_HOME}/bin/upgrade

EOF
}

# a $HOLY_HOME guaranteed
home() {
  local where="$HOLY_HOME"
  if ! [ -d "$where" ]; then
    # guess where $HOLY_HOME is (depending on the holy)
    where=$(dirname $0)
    if [ $(basename $where) == "cmd" ]; then
      # usually this one as it's in the path (and really no other option)
      where=$(dirname $0)/..
    fi
  fi
  # does it have holy symlink in it?
  if [ -s $where/holy ]; then
    echo "$where"
    true; return
  else
    >&2 echo "No \$HOLY_HOME $where"
    false; return
  fi
}


holy() {
  HOLY_HOME=$(home)
  local status=$?
  if [ $status -ne 0 ]; then
    # One should always know where $HOLY_HOME is
    >&2 echo "This is highly unexpected: Holy is lost as to where we are!"
    false; return
  fi

  # source the helper functions
  . "$HOLY_HOME"/cmd/holy.sh

  # NOTE: $HOLY_LEAD makes it possible to change the holy default to "you"
  # which only makes sense if yours is used far more often than "holy one"
  local the=$(lead $HOLY_LEAD && echo $HOLY_LEAD || echo "one")
  if lead $1; then
    the=$1
    shift
  fi

  # command is required
  if [ $# -eq 0 ]; then
    echo
    echo "Missing <command> from usage options below..."
    echo; usage
    true; return
  else
    # the command
    local cmd=$1
    shift

    # check whether holy is on - nothing will be done without it, almost...
    $(holy-on); status=$?
    if [ $status -ne 0 ]; then
      # exception to the holy-on rule are the following commands:
      local except="rc call home init"
      if ! is-some $except $cmd; then
        # bad status and no exception command, will not proceed any further
        echo "$(holy-say-on one $status)"
        false; return
      fi
    fi


    # Command code-blocks:

    if [ $cmd == "rc" ]; then
      # $1 is optional $SHELL
      local rc=$(shell-rc $1)
      echo "~/$rc"

    # makes development of holy.sh easier; maybe other benefits?
    elif  [ $cmd == "call" ]; then
      $@

    # a-path $(holy call home)
    # differentiate from holy path because this simply exposes home()
    # $the "you" mod is irrelevant here, all is about the "one"
    elif  [ $cmd == "home" ]; then
      echo $(a-path $HOLY_HOME)

    elif [ $cmd == "init" ]; then
      local where=${HOLY_HOME}/init
      # check if holy-on gave an error - $HOLY_HOME unknown
      if [ $status -ne 0 ]; then
        if [ $the != "one" ]; then
          # $the = "you": any other than "one" will require holy one on
          echo "$(holy-say-on one $status)"
          false; return
        fi
      # you a special case because can be anywhere
      elif [ $the == "you" ]; then
        # TODO: make the path optional if $DOTS_HOME is already set -
        # can we use holy-on DOTS_HOME for this?
        if [ $# -eq 0 ]; then
          errcho "Please give a path to your dots."
          false; return
        else
          # turn it into an absolute path
          where=$(a-path ${1}/init)
          # if that fails then use the original
          [ "$where" == "" ] && where=${1}/init
          shift
        fi
      fi
      # check if init dir exists at $where / or something is wrong
      # probably $the you path from above as the one should always be found
      if ! [ -d $where ]; then
        echo "Not Found: $where"
        false; return
      fi
      # now what do we run?
      if [ $# -eq 0 ]; then
        echo "No script was asked for."
        echo "Trying init for the current $SHELL shell."
      fi
      local shell=${1-$(basename $SHELL)}
      # there are scripts here that aren't shell init
      # which can also be run (though not advertised)
      local found=$where/$shell
      if [ -x $found ]; then
        # run the script
        $found "$@"
      else
        echo "Not found: $shell"
        echo -n "Can try it with: "
        # only the executables minus some files excluded via the grep below
        # that has remained to be just once for the time being
        find "$where" -type f -executable -exec basename {} \; \
        | grep -Ev 'once' \
        | tr '\n' ' '
        echo
        false; return
      fi

    elif  [ $cmd == "path" ]; then
      if [ $# -eq 0 ]; then
        echo "$HOLY_HOME"
      elif [ $1 == "repos" ]; then
        echo "$HOLY_HOME"/use/repos
      elif [ -e "$HOLY_HOME/$1" ]; then
        echo "$HOLY_HOME/$1"
      else
        errcho "Not Found: $HOLY_HOME/$1"
        false; return
      fi

    elif [[ $cmd == "in" || $cmd == "install" ]]; then
      local able=$1
      local path="${HOLY_HOME}/install/${able}"
      local onit="$HOLY_HOME/on/ability/$able"
      if [ $# -eq 0 ]; then
        echo "Usage: $COMMAND_FN $cmd <ability>"
        echo
        installable
        echo
      elif installable $able; then
        is-true $HOLY_EAGER && \
          silent holy update
        $path
        if [ $? -eq 0 ]; then
          cd "$HOLY_HOME"
          mkdir -p $(echo "$onit" | rev | cut -d'/' -f2- | rev)
          echo $(git show --format="%h" --no-patch) > $onit
        else
          errcho "Failed: $COMMAND_FN $cmd $@"
          false; return
        fi
      else
        errcho "Not found: $path"
        false; return
      fi

    elif [ $cmd == "ability" ]; then
      installable $1
      local status=$?
      [[ $# -ne 0 && $status -eq 0 ]] && echo $1
      exit $status

    elif [ $cmd == "confirm" ]; then
      local able=$1
      if [ $# -eq 0 ]; then
        errcho "Usage: $COMMAND_FN $cmd <ability>"
        false; return
      elif [ ! -f "${HOLY_HOME}/on/confirm/$able" ]; then
        # TODO: check if such ability exists
        echo "No confirmation script; assume good: $able"
        true; return #lack of confirm script means auto-confirm
      else
        ${HOLY_HOME}/on/confirm/$able; return
      fi

    elif [ $cmd == "bless" ]; then
      local able=$1
      local onit="$HOLY_HOME/on/ability/$able"
      if [ $# -eq 0 ]; then
        echo "Usage: $COMMAND_FN $cmd <ability>"
        false; return
      elif installable $able; then
        if holy confirm $able; then
          echo "Blessed be this ability."
          mkdir -p $(echo "$onit" | rev | cut -d'/' -f2- | rev)
          echo 'custom' > "$onit"
          true; return
        else
          errcho "Failed: $COMMAND_FN $cmd $@"
          errcho "Ability has failed to confirm."
          false; return
        fi
      else
        errcho "Ability not found for: $able"
        false; return
      fi

    elif [ $cmd == "on" ]; then
      local able=$1
      local onit="${HOLY_HOME}/on/ability/$able"
      if [[ $# -eq 0 || $able == "holy" ]]; then
        $(holy-on $the); status=$?
        echo "$(holy-say-on $the $status)"
        return $status
      else
        # TODO: allow to check by filename - e.g. node or platforms/node same
        # perhaps create an enabled() function similar to installable()
        if [ -f $onit ]; then
          if holy confirm $able; then
            local stamp=$(stat -c %y "$onit")
            if [ "$(cat $onit)" == "custom" ]; then
              echo "Blessed on $stamp"
            else
              echo "Installed on $stamp"
            fi
            true; return
          else
            errcho "This ability can no longer be confirmed."
            # TODO: refactor the code above into a function
            # to report the details of installed or blessed
            errcho "Perhaps fix with: holy install $able"
            false; return
          fi
        elif installable $able; then
          errcho "Turn on by: holy install $able"
          errcho "Optionally: holy bless $able"
          false; return
        else
          errcho "Ability '$able' not on, nor is it install-able."
          false; return
        fi
      fi

    elif [ $cmd == "up" ]; then
      sudoUse
      is-true $HOLY_EAGER \
      && echo && holy update
      holy upgrade

    elif [ $cmd == "update" ]; then
      echo "Getting the latest blesstheos..."
      cd "$HOLY_HOME" && git pull

    elif [ $cmd == "outdated" ]; then
      if is-true $HOLY_EAGER; then
        echo && holy update
      fi
      $(holy path bin/outdated)

    elif [ $cmd == "upgrade" ]; then
      $(holy path bin/upgrade)

    else
      errcho "Not found: holy $cmd"
      false; return
    fi
  fi
}

$COMMAND_FN "$@"
