#!/usr/bin/env bash

COMMAND_FN=dourbit

if [ $(basename $0) != $COMMAND_FN ]; then
  echo "The $COMMAND_FN script cannot be sourced."
  return 1
fi

# NOTE: dourbit and holy - very much meant to be together
if holy-one 2> /dev/null; then
  holy-dot cmd/dourbit.sh
  # NOTE: this script has no further dependencies, except for install/urbit
else
  . $(dirname $0)/holy.sh
  echo "$(holy-say-on one 1)"
  exit 1
fi


usage() {
  cat <<EOF
Usage: $COMMAND_FN <command> [args]

The following commands can be run, some of which provide their own usage info:

  install   > downloads some scripts, clones git repos, and sets-up the system
  confirm   > establish that dourbit install has been run / all appears well
  version   > report through urbit -R "build info", including other versions
  current   > a starter current, for now simply gets the urbit-v from above
  update    > does git fetch && docker pull as URBIT_EAGER not set by default
  source    > does git fetch using the default filter or specify some tag*
  tagged    > all git releases that have been fetched with the filter applied
  recent    > all git releases newer than the current or a given tag version
  latest    > shows the latest tags from urbit repo of non-rc urbit & urbit-os
  foremost  > the tag of the topmost latest release to use for default build
  existing  > checks that an image exists - so just use it rather than build
  images    > shows all the docker images that have been pulled / built here
  build     > initial docker build - takes an urbit tag or uses latest tag
  image     > shows the docker image currently configured and probably used
  image-id  > shows the docker image id of the current urbit or urbit-os image
  dangling  > lists all dangling images; keep for re-build; exit 1 if 0 <none>
  clean-up  > make sure no dangling images remain and thus waste no space
  bin       > check if a command is an executable file and echo the path to it
  cmd       > check if a command exists; echo the path above or its usage help
  run-zod   > runs a fakezod ship called zod to use for development purposes
  hex-seed  > hexdump -n 32 -e '4/4 "%08X"' /dev/random # for network keys gen
  new-ship  > create a ship, usually a planet for which you have a .key
  new-comet > get a new comet, usually takes some non-trivial time to mine
  piers     > a list of urbit assets contained in ~/data/urbit that can be run
  run       > boots a ship or comet - one of your urbit assets; can be zod too
  host      > have it run a docker container in the background - WIP...
  urbit     > WARNING: it can destroy your ship if no /urbit/SHIP vol. mounted

EOF
}


dourbit() {
  if [ $# -eq 0 ]; then
    usage; true; return
  else
    local cmd=$1
    shift

    if [ $cmd == "install" ]; then
      holy in urbit

    elif [ $cmd == "confirm" ]; then
      if holy confirm urbit; then
        echo "All is in order."
      else
        echo "Maybe run this for an easy fix: $COMMAND_FN install"
        false; return
      fi

    # silently confirm urbit is installed, the rest of commands will need it
    elif ! holy on urbit >/dev/null 2>&1; then
        >&2 echo "Not Installed."
        dourbit confirm
        false; return

    elif [ $cmd == "version" ]; then
      dourbit urbit -R
      echo; docker --version
      echo "URBIT_IMAGE=$(docker-image)"

    elif [ $cmd == "current" ]; then
      silent-pull
      # TODO: this should become the actual build tag
      # instead of oldest possible tag?
      echo "urbit-v$(dourbit urbit -R \
                 | grep -e '^urbit [0-9]' \
                 | grep -oe '[0-9]\+.*$' \
                 | tr   -d  '[:space:]')"

    elif [ $cmd == "update" ]; then
      local image=$(docker-image)
      echo
      if pushed $image; then
        echo "Docker :latest? ..."
        local command="docker pull $image"
        echo $command
        $command
      fi
      echo; echo "Urbit releases ..."
      fetch
      echo

    elif [ $cmd == "source" ]; then
      fetch "$@"

    elif [ $cmd == "tagged" ]; then
      silent-fetch
      tagged "$@"

    elif [ $cmd == "recent" ]; then
      silent-fetch
      local tag=${1-$(dourbit current)}
      tagged 'urbit-' | sed -e "/${tag}/q"

    elif [ $cmd == "latest" ]; then
      silent-fetch
      echo -e "$(latest 'urbit-v')\n$(latest 'urbit-os-v')" | sort -r

    elif [ $cmd == "foremost" ]; then
      silent-fetch
      toptag tagged ${1-'urbit-'} ${@:2}

    elif [ $cmd == "existing" ]; then
      local wut=${1-$(docker-image)}
      if [[ ! -z $(docker images -q $wut) ]]; then
        echo $wut
      else
        >&2 echo "Not found: $wut"
        if [[ ! -z $(dourbit tagged $wut) ]]; then
          echo "Can build with: dourbit build $wut"
        fi
        false; return
      fi

    elif [ $cmd == "images" ]; then
      docker images --format "{{.ID}}: {{.Repository}}:{{.Tag}}" \
      | grep 'urbit-v\|urbit-os-v' \
      | sed -e 's/:latest$//g'

    elif [ $cmd == "build" ]; then
      local tag=$(URBIT_EAGER=true dourbit foremost $@)
      if [ "$tag" == "" ]; then
        >&2 echo "Not Found: ${1-'urbit-'}*"
        false; return
      elif [ $(dourbit existing $tag) ]; then
        echo "Pointless, will not build."
        echo "Have This: $tag"
        echo "Docker ID: $(dourbit image-id $tag)"
        true; return
      else
        cd $(repos)/urbit-docker && \
          git pull && \
          docker build -t $tag --build-arg branch=$tag .
      fi

    elif [ $cmd == "image" ]; then
      dourbit existing $(docker-image)

    elif [ $cmd == "image-id" ]; then
      if [ $# -eq 0 ]; then
        docker images -q $(docker-image) \
        | head -n 1
      else
        local tag=$1
        dourbit images $tag | grep $tag \
        | head -n 1 | sed -e "s/: ${tag}//"
      fi

    elif [ $cmd == "dangling" ]; then
      # NOTE: there is nothing *urbit* about these images, only dangling ...
      if [ $(docker images --filter 'dangling=true' -q | wc -w) -ne 0 ]; then
        echo "Found dangling images:"
        docker images --filter "dangling=true" -q
        true; return
      else
        echo "Nothing is dangling."
        false; return
      fi

    elif [ $cmd == "clean-up" ]; then
      if dourbit dangling >/dev/null 2>&1; then
        echo "docker rmi"
        docker rmi $(docker images --filter "dangling=true" -q --no-trunc)
      else
        echo "Nothing to clean-up."
      fi

    elif [[ $cmd == "bin" || $cmd == "cmd" ]]; then
      # these are similar and related with a bit of code in common
      local name=$1
      if [ $# -eq 0 ]; then
        >&2 echo "Usage: $COMMAND_FN $cmd <command>"
        false; return
      fi

      if [ $cmd == "bin" ]; then
        if [ -x "$(command -v ~/bin/dourbit/$name)" ]; then
          echo ~/bin/dourbit/$name
        elif [ -x "$(command -v ${HOLY_HOME}/bin/dourbit/${name})" ]; then
          echo "$HOLY_HOME"/bin/dourbit/$name
        else
          >&2 echo "Not Found: $name"
          false; return
        fi
      fi

      if [ $cmd == "cmd" ]; then
        local found=false
        # is it a script?
        if dourbit bin $name >/dev/null 2>&1; then
          dourbit bin $name
          found=true
        fi
        # is it documented?
        local pattern="^[[:blank:]]\+$name[[:blank:]]\+> "
        usage | grep -q -e "$pattern"
        if [ $? -eq 0 ]; then
          echo $(usage | grep -e "$pattern")
          found=true
        fi
        # unknown command
        if ! $found; then
          usage
          >&2 echo "Not Found: dourbit $name"
          false; return
        fi
      fi

    elif [ $cmd == "hex-seed" ]; then
      hexdump -n 32 -e '4/4 "%08X"' /dev/random
      echo

    elif [ $cmd == "piers" ]; then
      ls "$HOME"/data/urbit | cat

    elif dourbit bin $cmd; then
      # that's a script to be executed with the rest of the given args
      # some of these commands operate on a pier in the current dir ./
      cd "$HOME"/data/urbit
      # zod commands(s) use a different fakezod image
      if [ $cmd == "run-zod" ]; then
        tis-some $URBIT_IMAGE_0 && echo "Custom URBIT_IMAGE_0=$URBIT_IMAGE_0"
      else
        tis-some $URBIT_IMAGE && echo "Custom URBIT_IMAGE=$URBIT_IMAGE"
      fi
      echo
      # certain commands need special care
      if [[ "$cmd" == "run" || "$cmd" == "host" ]]; then
        # make sure a pier is given
        if [ $# -eq 0 ]; then
          >&2 echo "Usage: $COMMAND_FN $cmd <pier> [urbit-args]"
          false; return
        fi
        # remove a leading ~
        local pier=$([[ "$1" =~ ^~ ]] && echo ${1:1} || echo "$1")
        # make sure the pier exists as a directory
        if ! [ -d "$pier" ]; then
          >&2 echo "Not found: $(pwd)/$pier"
          false; return
        # and appears to be a valid pier?
        elif ! [ -d "$pier/.urb" ]; then
          >&2 echo "Not found: $(pwd)/$pier/.urb"
          false; return
        fi
        # pier looks valid in principle...
        $(dourbit bin $cmd) "$pier" ${@:2}
      else
        # other valid command
        $(dourbit bin $cmd) "$@"
      fi
    else
      false; return
    fi
  fi
}

$COMMAND_FN "$@"
